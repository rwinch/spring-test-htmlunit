buildscript {
  repositories {
    maven { url "https://repo.spring.io/plugins-release" }
    maven { url "https://repo.spring.io/plugins-snapshot" }
    jcenter()
  }
  dependencies {
    classpath("org.springframework.build.gradle:propdeps-plugin:0.0.6-SNAPSHOT")
    classpath('me.champeau.gradle:gradle-javadoc-hotfix-plugin:0.1')
    classpath('org.gradle.api.plugins:gradle-tomcat-plugin:1.2.2')
    classpath 'org.asciidoctor:asciidoctor-gradle-plugin:0.7.3'
  }
}
ext.releaseBuild = version.endsWith('RELEASE')
ext.snapshotBuild = version.endsWith('SNAPSHOT')
ext.milestoneBuild = !(releaseBuild || snapshotBuild)
ext.junitVersion ='4.11'
ext.seleniumVersion = '2.42.2'
ext.springVersion = '4.1.0.RC2'
ext.springSecurityVersion = '4.0.0.M2'

ext.coreModuleProjects = [project('spring-test-htmlunit')]

apply plugin: 'sonar-runner'

sonarRunner {
    sonarProperties {
        property "sonar.java.coveragePlugin", "jacoco"
        property "sonar.projectName", "Spring Test HtmlUnit"
        property "sonar.jacoco.reportPath", "${buildDir.name}/jacoco.exec"
        property "sonar.links.homepage", 'https://github.com/spring-projects/spring-test-htmlunit'
        property "sonar.links.ci", 'https://build.spring.io/browse/SPRINGTESTMVC-BSTMHTMLUNIT'
        property "sonar.links.issue", 'https://github.com/spring-projects/spring-test-htmlunit/issues'
        property "sonar.links.scm", 'https://github.com/spring-projects/spring-test-htmlunit'
        property "sonar.links.scm_dev", 'https://github.com/spring-projects/spring-test-htmlunit.git'
        property "sonar.java.coveragePlugin", "jacoco"
    }
}

configure(allprojects) {
  apply plugin: 'java'
  apply plugin: 'eclipse-wtp'
  apply plugin: 'idea'
  apply plugin: 'propdeps'
  apply plugin: 'propdeps-maven'
  apply plugin: 'propdeps-idea'
  apply plugin: 'propdeps-eclipse'

  apply from: "${rootProject.projectDir}/publish-maven.gradle"

  group = 'org.springframework'

  sourceCompatibility=1.6
  targetCompatibility=1.6

  [compileJava, compileTestJava]*.options*.compilerArgs = ['-Xlint:none']

  test.systemProperty("java.awt.headless", "true")

  repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/libs-snapshot' }
  }

  configurations {
      jacoco //Configuration Group used by Sonar to provide Code Coverage using JaCoCo
  }

  configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
      if (details.requested.group == 'org.springframework' &&
              details.requested.name != project.findProject(':spring-test-htmlunit').name) {
        details.useVersion springVersion
      }
    }
  }


  idea {
    module {
      scopes.PROVIDED.plus += configurations.provided
      scopes.PROVIDED.plus += configurations.optional
    }
  }
  // servlet-api (2.5) and tomcat-servlet-api (3.0) classpath entries should not be
  // exported to dependent projects in Eclipse to avoid false compilation errors due
  // to changing APIs across these versions
  eclipse.classpath.file.whenMerged { classpath ->
    classpath.entries.findAll { entry -> entry.path.contains('servlet-api') }*.exported = false
  }
}

configure(allprojects) { subproject ->
  jar {
    manifest.attributes['Implementation-Title'] = subproject.name
    manifest.attributes['Implementation-Version'] = subproject.version
  }

  javadoc {
    options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
    options.author = true
    options.header = project.name
  }

  task sourcesJar(type: Jar, dependsOn:classes) {
    classifier = 'sources'
    from sourceSets.main.allJava
  }

  task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
  }

  artifacts {
    archives sourcesJar
    archives javadocJar
  }

  task listDependencies {
    doLast {
      println project.name
      configurations.testRuntime.collect { "    $it.path" }.sort().each { println it }
    }
  }

  test {
    doFirst {
        //jvmArgs "-javaagent:${configurations.jacoco.asPath}=destfile=${buildDir}/jacoco.exec,includes=org.springframework.test.web.servlet.htmlunit.*"
    }
  }
}


configure(rootProject) {
  apply plugin: 'org.asciidoctor.gradle.asciidoctor'

  asciidoctorj {
    version = '1.5.0.preview.7'
  }
  asciidoctor {
    options = [
            eruby: 'erubis',
            attributes: [
                    toc : '',
                    'toc-placement' : 'preamble',
                    copycss : '',
                    icons : 'font',
                    'source-highlighter': 'prettify',
                    sectanchors : '',
                    idprefix: '',
                    idseparator: '-',
                    doctype: 'book',
                    numbered: '',
                    revnumber : project.version,
                    version : project.version,
                    snapshot : snapshotBuild,
                    release : releaseBuild,
                    milestone : milestoneBuild
            ]
    ]
  }
  build.dependsOn asciidoctor

  task api(type: Javadoc) {
    group = 'Documentation'
    description = 'Generates aggregated Javadoc API documentation.'
    title = "${rootProject.description} ${version} API"
    options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
    options.author = true
    options.header = rootProject.description
    options.links(
      'http://docs.jboss.org/jbossas/javadoc/4.0.5/connector'
    )
    source coreModuleProjects.collect { project ->
      project.sourceSets.main.allJava
    }
    destinationDir = new File(buildDir, "api")
    classpath = files(coreModuleProjects.collect { project ->
      project.sourceSets.main.compileClasspath
    })
    maxMemory = '1024m'
  }

  task docsZip(type: Zip) {
    group = 'Distribution'
    classifier = 'docs'
    description = "Builds -${classifier} archive containing api and reference " +
      "for deployment at docs.spring.io"

    from (api) {
      into 'api'
    }

    from (asciidoctor) {
        into 'reference'
    }
  }

  task distZip(type: Zip, dependsOn: [docsZip]) {
    group = 'Distribution'
    classifier = 'dist'
    description = "Builds -${classifier} archive, containing all jars and docs, " +
          "suitable for community download page."

    def baseDir = "${project.name}-${project.version}";

    from('src/dist') {
      include 'readme.txt'
      include 'license.txt'
      include 'notice.txt'
      into "${baseDir}"
      expand(copyright: new Date().format('yyyy'), version: project.version)
    }

    from(zipTree(docsZip.archivePath)) {
      into "${baseDir}/docs"
    }

    coreModuleProjects.each { project ->
      into ("${baseDir}/libs") {
        from project.jar
        if (project.tasks.findByPath('sourcesJar')) {
          from project.sourcesJar
        }
        if (project.tasks.findByPath('javadocJar')) {
          from project.javadocJar
        }
      }
    }
  }

  artifacts {
    archives docsZip
    archives distZip
  }

  task wrapper(type: Wrapper) {
    description = 'Generates gradlew[.bat] scripts'
    gradleVersion = '1.11'
  }
}

def reservePorts(int count) {
    def sockets = []
    for(int i in 1..count) {
        sockets << new ServerSocket(0)
    }
    def result = sockets*.localPort
    sockets*.close()
    result
}
